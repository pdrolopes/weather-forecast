import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchRegions } from  '../../service/openData';
import { RegionType } from '../../types';

type FailedState = {
  kind: 'Failed';
  error: string;
}
type LoadedState = {
  kind: 'Loaded';
  regions: Array<RegionType>;
}
type LoadingState = {
  kind: 'Loading';
}
type IdleState = {
  kind: 'Idle';
}

type State = IdleState | LoadingState | LoadedState | FailedState;
type RegionState = {
  innerState: State;
}

const initialState: RegionState = {
  innerState: { kind: 'Idle'},
};

export const loadRegions = createAsyncThunk(
  'region/load',
  fetchRegions
  // async () => {
  //   const response = await fetchRegions();
  //   // The value we return becomes the `fulfilled` action payload
  //   return response.data;
  // }
);

export const regionSlice = createSlice({
  name: 'region',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadRegions.pending, (state) => {
        state.innerState = {kind: 'Loading'};
      })
      .addCase(loadRegions.fulfilled, (state, action) => {
        const regions = action.payload.map(region => ({
          id: region.globalIdLocal,
          name: region.local,
        }))

        state.innerState = {
          kind: 'Loaded',
          regions
        }
      })
      .addCase(loadRegions.rejected, (state, action) => {
        state.innerState = {
          kind: 'Failed',
          error: action.error.message || '',
        }
      });
  },
});



export const selectRegions = (state: RootState): Array<RegionType> => {
  const { innerState } = state.region;
  if (innerState.kind === 'Loaded') {
    return innerState.regions ;
  }

  return [];
}

export default regionSlice.reducer;
